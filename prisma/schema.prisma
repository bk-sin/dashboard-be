// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  permissions Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id               Int       @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String    @unique
  phone            String?
  password         String
  roleId           Int       @default(1)
  role             Role      @relation(fields: [roleId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isActive         Boolean   @default(true)
  isVerified       Boolean   @default(false)
  isBlocked        Boolean   @default(false)
  lastLogin        DateTime?
  //profilePictureId Int?
  //profilePicture   Image?    @relation(fields: [profilePictureId], references: [id])
  addresses        Address[]
  Review           Review[]
  Order            Order[]
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  slug        String       @unique
  price       Float
  stock       Int          @default(0)
  sku         String       @unique
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  images      Image[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isActive    Boolean      @default(true)
  isFeatured  Boolean      @default(false)
  isOnSale    Boolean      @default(false)
  discount    Float        @default(0)
  rating      Float        @default(0)
  reviews     Review[]
  ProductTag  ProductTag[]
  OrderItem   OrderItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //User      User[]
}

model Tag {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  slug       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ProductTag ProductTag[]
}

model ProductTag {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  total             Float
  status            String      @default("pending")
  paymentMethod     String
  shippingAddressId Int
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  items             OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
